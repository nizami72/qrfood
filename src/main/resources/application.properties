app.version=0.1.27

# Spring application
spring.application.name=qrfood-backend


# DataSource
spring.datasource.url=jdbc:mysql://localhost:3306/qrfood?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=qrfood
spring.datasource.password=HJuy67Qw@HjymPa
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


# JPA / Hibernate
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.open-in-view=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.fetch_size=100

logging.level.org.hibernate=${HIBERNATE_LOG_LEVEL}

spring.main.web-application-type=servlet


# JPA
spring.jpa.show-sql=false

# SpringDoc OpenAPI
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha

springdoc.swagger-ui.tryItOutEnabled=true
springdoc.packages-to-scan=az.qrfood.backend
springdoc.paths-to-match=/api/**
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.configUrl=/v3/api-docs/swagger-config
springdoc.swagger-ui.url=/v3/api-docs
springdoc.cache.disabled=true

# ENVIRONMENT
version=
protocol=${PROTOCOL:=http://}
domain.name=${DOMAIN_NAME}
domain.port=${DOMAIN_PORT}

protocol.fe=${PROTOCOL_FE}
domain.name.fe=${DOMAIN_NAME_FE}
domain.port.fe=${DOMAIN_PORT_FE}

# URLs
host.name=${domain.name}${domain.port}${version}
host.name.redirect=${protocol.fe}${domain.name.fe}${domain.port.fe}${version}
base.url=${protocol}${host.name}

s=/%s
add=/add
client=/client
dish=/dish
dishes=/dishes
image=/api/image
menu=/menu
order-decision=/order-decision
order-items=/order-items
orders=/orders
qrcode=/qrcode
status=/status
tables=/tables
register=/register
owner=/owner
api=/api

#~ AUTH MANAGEMENT
auth=/api/auth
auth.login=/api/auth/login
auth.logout=/api/auth/logout
auth.status=/api/auth/status
auth.refresh=/api/auth/refresh-token
#~ END

#~ EATERY MANAGEMENT
#? POST eatery
#? GET all eatery
eatery=/api/eatery
#? GET, PUT, DELETE all by id /eatery/{eateryId}
eatery.id=/api/eatery/{eateryId}
#? GET by owner
eatery.owner=/api/eatery/owner/{ownerId}
#~ END

#~ CATEGORY ENDPOINTS
category=/category
#? POST, GET ALL /eatery/{eateryId}/category
eatery.id.category=${eatery.id}${category}
#? GET PUT DELETE /eatery/{eateryId}/category/{categoryId}
eatery.id.category.id=${eatery.id.category}/{categoryId}
#~ END


#~ DISH MANAGEMENT
#? POST a new dish: /eatery/{eateryId}/category/{categoryId}/dish
#? GET  ALL dishes:  /eatery/{eateryId}/category/{categoryId}/dish
eatery.id.category.id.dish=${eatery.id.category.id}${dish}
#? GET a dish by ID             /eatery/{eateryId}/category/{categoryId}/dish/{dishId}
#? PUT update the dish by ID    /eatery/{eateryId}/category/{categoryId}/dish/{dishId}
#? DELETE dish by ID            /eatery/{eateryId}/category/{categoryId}/dish/{dishId}
eatery.id.category.id.dish.id=${eatery.id.category.id.dish}/{dishId}
#~ END


#~ TABLE MANAGEMENT
# POST, GET ALL by eatery
table=${eatery.id}/table
#GET, PUT, DELETE by id
table.id=${table}/{tableId}
#~ END


#~ ORDER MANAGEMENT
#? POST:    by eateryId: /api/eatery/{eateryId}/order (table id is given as a parameter in JSON)
#? GET ALL: by eateryId: /api/eatery/{eateryId}/order (table id is given as a parameter in JSON)
order=${eatery.id}/order
#? GET ALL by tableId /api/eatery/{eateryId}/table/tableId
order.table.id=${order}/table/{tableId}
#? GET      by orderId /api/eatery/{eateryId}/order/{orderId}
#? DELETE   by orderId /api/eatery/{eateryId}/order/{orderId}
#? PUT      by orderId /api/eatery/{eateryId}/order/{orderId}
order.id=${order}/{orderId}
#? GET by status: /api/eatery/{eateryId}/order/status/{status}
order.status=${order}${status}/{status}
#~ END


#~ ORDER ITEM MANAGEMENT
#? GET all order items
order.item=${eatery.id}/order-item
#? DELETE___delete order item by id /api/eatery/{eateryId}/order-item/{orderItemId}
#? PUT______update order item by id /api/eatery/{eateryId}/order-item/{orderItemId}
#? GET_____________order item by id /api/eatery/{eateryId}/order-item/{orderItemId}
order.item.id=${order.item}/{orderItemId}
#? GET_____all order items in order /api/eatery/{eateryId}/order-item/order/{orderId}
#? POST___new order item into order /api/eatery/{eateryId}/order-item/order/{orderId}
order.item.order.id=${order.item}/order/{orderId}
#~ END


#~ USER MANAGEMENT
#? POST    /api/eatery/{eateryId}/user Create a new user of an eatery
#? GET     /api/eatery/{eateryId}/user Get all users of an eatery
usr=/api/eatery/{eateryId}/user
#? POST    /api/eatery/{eateryId}/user/general Create a new general user of an eatery
user.general=${usr}/register/general
#? DELETE  /api/eatery/{eateryId}/user/{id} Delete a user
#? GET     /api/eatery/{eateryId}/user/{id} Get a user by ID
#? PUT     /api/eatery/{eateryId}/user/{id} Update an existing user
user.id=${usr}/{userId}
#? GET     /api/eatery/{eateryId}/users Get all users for specific eatery
users=${usr}/users
#? GET     /api/eatery/{eateryId}/user/by-username/{username} Get a user by username
user.n=${usr}/name/{userName}
#~ END


#~ ADMIN MANAGEMENT
#? POST    /api/admin Register a new superuser
admin=/api/admin
admin.eatery=/eatery
#? POST    /api/admin/eatery Register a new eatery admin with an eatery
full.admin.eatery=/api/admin/eatery
#~ END


#~ CLIENT MANAGEMENT
#? GET POST
api.client=/api/client
#? GET by eatery id
api.client.eatery=/api/client/eatery/{eateryId}
#? GET by eater and table id
api.client.eatery.table=/api/client/eatery/{eateryId}/table/{tableId}
#? DELETE GET PUT by client id
api.client.id=/api/client/{id}
#~



segment.api.category=${api}${category}
segment.api.client=${api}${client}
segment.api.dish=${api}${dish}
api.eatery=${api}${eatery}
api.user=/api/user
api.user.register=${api}/user${register}
segment.api.qr-code=${api}${qrcode}
segment.client.orders=${client}${order-decision}

segment.category=${api}${eatery}/{eateryId}${category}

segment.menu=${host.name.redirect}${client}/eatery${s}/table${s}${add}${s}${menu}

relative.path.api.client.eatery.arg.table.arg=${segment.api.client}/eatery/{eateryId}/table/{tableId}
full.path.fe.eatery.image=${image}${eatery}${s}${s}
full.path.fe.category.image=${image}${category}${s}${s}
full.path.fe.dish.image=${image}${dish}${s}${s}
full.path.fe.api.tables.image=${image}${tables}
full.path.fe.add.dish.2.order=${base.url}${api}${order-items}
full.path.fe.delete.menu-item=${base.url}${api}${order-items}${s}

# PATH SECTION
app.home.folder=${APP_ROOT_FOLDER:=./}
folder.root.images.eatery=${app.home.folder}/images/eateries
folder.root.images.categories=${app.home.folder}/images/categories
folder.root.images.dishes=${app.home.folder}/images/dishes

# JWT Configuration
jwt.secret=yourVerySecretKeyThatIsAtLeast256BitsLongAndShouldBeChangedInProduction
jwt.expiration=36000000

fall.back.photo=fallback.webp

all=/**

# application home folder on home ubuntu: /home/nizami/projects_resources/qr_food
spring.web.resources.static-locations=file:${folder.root.images.eatery},\
  \ file:${folder.root.images.categories},\
  \ file:${folder.root.images.dishes}


server.address=0.0.0.0
server.port=8081


#HOME_FOLDER=/home/nizami/
#LOG_FILE_PATH=/home/nizami/Dropbox/projects/Java/avtotop/logs
#PROTOCOL=http://
#SERVER_DOMAIN_NAME=localhost
#SERVER_DOMAIN_PORT=8080
#SERVER_DOMAIN_PORT_2=
#SERVER_SSL_KEY_ALIAS=backend
#SERVER_SSL_KEY_PASSWORD=zaq@WEpo
#SERVER_SSL_KEY_STORE=/home/nizami/.ssh/keystore.p12
#SERVER_SSL_KEY_STORE_PASSWORD=zaq@WEpo
#SERVER_SSL_KEY_STORE_TYPE=pkcs12
#SQL_DB_NAME=carhub
#SQL_PASSWORD=CIxx50NZo9IGaXMVhVtS@
#SQL_USER=user3
#ZOHO_PASSWORD=FvaKXRUqSZJG